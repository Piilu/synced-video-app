generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  bio            String?
  role           Role?            @default(USER)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  accounts       Account[]
  ConnectedRooms ConnectedRooms[]
  rooms          Room[]
  sessions       Session[]
  videos         Video[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  isPublic  Boolean
  size      Int
  location  String   @db.VarChar(255)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room[]
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Video_userId_fkey")
}

model Room {
  id             String           @id @default(cuid())
  name           String           @db.VarChar(50)
  isPublic       Boolean
  coverImage     String?          @db.VarChar(255)
  videoId        Int?
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ConnectedRooms ConnectedRooms[]
  user           User             @relation(fields: [userId], references: [id])
  video          Video?           @relation(fields: [videoId], references: [id])

  @@index([userId], map: "Room_userId_fkey")
  @@index([videoId], map: "Room_videoId_fkey")
}

model ConnectedRooms {
  userId   String?
  socketId String @unique
  roomId   String
  isGuest  Boolean
  guestId  String?
  room     Room    @relation(fields: [roomId], references: [id])
  user     User?   @relation(fields: [userId], references: [id])

  @@index([roomId], map: "ConnectedRooms_roomId_fkey")
  @@index([userId], map: "ConnectedRooms_userId_fkey")
}
